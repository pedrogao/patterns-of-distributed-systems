import{_ as i,c as a,a4 as n,o as h}from"./chunks/framework.DDPRMxUp.js";const t="/patterns-of-distributed-systems/assets/1.UhHrWhor.png",l="/patterns-of-distributed-systems/assets/2.Bf79Iwr6.png",o=JSON.parse('{"title":"High-Water Mark (高水位标记)","description":"","frontmatter":{},"headers":[],"relativePath":"part2/Chapter 12. High-Water Mark/index.md","filePath":"part2/Chapter 12. High-Water Mark/index.md"}'),p={name:"part2/Chapter 12. High-Water Mark/index.md"};function k(e,s,E,r,d,g){return h(),a("div",null,s[0]||(s[0]=[n('<h1 id="high-water-mark-高水位标记" tabindex="-1">High-Water Mark (高水位标记) <a class="header-anchor" href="#high-water-mark-高水位标记" aria-label="Permalink to &quot;High-Water Mark (高水位标记)&quot;">​</a></h1><p>WAL（预写日志）中的一个索引（index），用来标记最后一次成功复制的日志序号。</p><p>又称：<strong>提交索引</strong></p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>WAL 模式用于服务器崩溃、重启后恢复状态。但在服务器故障时，仅 WAL 是不够用的，没办法保证服务继续可用。<br> 如果单个服务器节点发生故障，那么在节点重启前，客户端都无法成功请求。为了提升系统的可用性，我们可以在 多个服务器节点上复制日志。通过领导者、追随者模式，领导者将其所有日志条目复制到多数（Quorum）追随者上。<br> 如果领导者故障了，那么可以选出新的领导者，新的领导者继续接处理请求，客户端可以像以前一样继续工作。</p><p>但这样仍然会出现一些问题：</p><ul><li>领导者可能在日志发送给追随者之前就故障了；</li><li>领导者可能将日志发送给了一部分追随者，但未能成功同步给多数追随者。</li></ul><p>在这些 case 下，部分追随者缺失一些日志，部分追随者可能比其它追随者有更多的日志。</p><p><strong>因此，每个追随者都必须需要知道哪些日志可以安全提供给客户端。</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里需要一点的专业背景，不适合初学者。 在分布式场景下，每个追随者节点都会处理客户端请求，但一般都是只读的，达到分担请求压力，提升吞吐量的作用。 但在客户端看来，多个追随者应该给出一致的请求结果，即对外表现仍然是一个节点。 上述的 case 中，多个追随者在日志上没有对齐，试想，如果日志内容刚好是 <code>Set A = 1</code>，此时节点 A 有，但节点 B 没有，那么 客户端读 A 和读 B 得到的结果是不一样的，即数据不一致。</p><p>这个时候就需要高水位标记了，部分追随者即使有多的日志，但所有追随者的有效日志索引是一致的，那对外的数据仍是一致的。</p></div><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>高水位标记是日志文件中的一个索引，记录了当前领导成功复制到多数追随者的最后一个日志条目。领导者在复制过程中，也会<br> 将高水位标记同步给追随者。集群中的所有节点，在处理客户端请求时，仅使用高水位以下的日志。</p><p>操作顺序如下：</p><p><img src="'+t+`" alt="1"></p><p>每条日志，领导者追加到本地 WAL 后，然后将其发送到所有追随者。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// leader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendAndReplicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Long lastLogEntryIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> appendToLocalLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        replicateOnFollowers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastLogEntryIndex);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastLogEntryIndex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> replicateOnFollowers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryAtIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FollowerHandler follower </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> followers) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            replicateOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(follower, entryAtIndex); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// send replication requests to followers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>追随者处理复制请求，并将日志追加到本地。成功追加日志后，追随者向领导者回复它们所拥有的最新日志条目索引。<br> 当然，回复中还包括了追随者当前的世代时钟（Generation Clock）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// follower</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReplicationResponse </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReplicationRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">replicationRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WALEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replicationRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicationResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SUCCEEDED, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serverId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), replicationState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLastLogIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当收到响应时，领导者会更新在各个服务器上已复制的日志索引。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Updating matchIndex for &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> + </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getServerId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() + </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; to &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> + </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getReplicatedLogIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateMatchingLogIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getServerId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getReplicatedLogIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logIndexAtQuorum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeHighwaterMark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logIndexesAtAllServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">numberOfServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHighWaterMark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replicationState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHighWaterMark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logIndexAtQuorum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">currentHighWaterMark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logIndexAtQuorum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> != </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        applyLogEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentHighWaterMark, logIndexAtQuorum);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        replicationState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHighWaterMark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logIndexAtQuorum);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>查看领导者以及所有追随者的日志索引，选取在大多数节点上都存在的索引来作为高水位标记。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Long </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computeHighwaterMark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">serverLogIndexes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> noOfServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        serverLogIndexes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compareTo);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverLogIndexes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(noOfServers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在领导者选举过程中可能会出现一个棘手的问题。</p><p>我们必须确保在任何服务器节点向客户端发送数据之前，所有节点的高水位标记是一致的。</p><p>如果现有领导者在将高水位标记传播给所有追随者之前，就故障了，那么所有节点的高水位标记就无法保证不一致了。</p><p>Raft 算法在领导者选举成功后，向领导者的日志中追加一个 noop 日志来解决这一问题， 当所有追随者确认该条目后，才会为客户端提供服务。</p><p>在 ZAB（Zookeeper 原子广播协议）中，新领导者在开始为客户端提供服务之前，会先尝试将其所有日志推送给所有追随者。</p></div><p>领导者会将高水位标记作为常规心跳的一部分或者通过单独的请求传播给追随者。</p><p>然后，追随者会相应地设置它们的高水位标记。</p><p>任何客户端只能读取到高水位标记之前的日志。高水位标记之后的日志对客户端来说是不可见的，因为无法确认这些日志是否已被复制，<br> 所以如果领导者出现故障，并且其他服务器被选举为领导者，那么这些条目可能就丢失了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WALEntry </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replicationState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHighWaterMark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Log entry not available&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="日志清理" tabindex="-1">日志清理 <a class="header-anchor" href="#日志清理" aria-label="Permalink to &quot;日志清理&quot;">​</a></h2><p>当一个服务器节点在崩溃，重启后重新加入集群，其日志可能与其它节点存在冲突。</p><p>因此，每当一个节点加入集群时，它都会与集群领导者进行核对，以了解日志中的哪些条目可能存在冲突。</p><p>然后，它会将日志截断到与领导者条目相匹配的位置，接着追加领导者后续日志，以确保其日志与集群其它节点相匹配。</p><p>考虑以下示例。客户端发送请求，要求添加四条日志。领导者成功复制了三个，但在将 4 添加到自己的日志后出现故障。 其中一个追随者被选举为新的领导者，并接收来自客户端更多的日志。当出现故障的那个领导者再次加入集群时，它有冲突的日志 4。 因此，它需要将自己的日志截断到 3，然后添加 5，以使自己的日志与集群其它节点相匹配。</p><p><img src="`+l+`" alt="2"></p><p>任何重启或者新加入集群的节点，在短暂启动后，都会找到集群中的领导者。 然后，它会明确询问当前的高水位标记，将自己的日志截断至高水位标记处，再从领导者那里获取超出高水位标记的所有日志。 像 RAFT（ raft 一致性算法 ）这样的复制算法有相应的方法，通过将自身日志中的条目与请求中的日志条目进行核对来找出存在冲突的部分。 那些具有相同索引的日志，但世代时钟（Generation Clock）更低的日志会被移除。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maybeTruncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReplicationRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">replicationRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        replicationRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLastLogIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntryIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntryIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGeneration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntryIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一种支持日志截断的简单实现方式是维护一个日志索引与文件位置的映射表。然后就可以按照如下方式在给定的索引处截断日志：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WALSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> truncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filePosition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryOffsets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logIndex);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (filePosition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No file position available for logIndex=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logIndex);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePosition);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        truncateIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logIndex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> truncateIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">logIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        entryOffsets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logIndex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><ul><li><p>所有的一致性算法都使用高水位来确定何时应用客户端提议来触发状态变更。例如，在 <a href="https://raft.github.io/" target="_blank" rel="noreferrer">RAFT</a>一致性算法中，高水位标记被称作“提交索引（CommitIndex）”。</p></li><li><p><a href="https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/" target="_blank" rel="noreferrer">Kafka 复制协议</a>中，有一个单独维护的索引名为“高水位标记”。消费者只能看到高水位以下的消息。</p></li><li><p><a href="https://bookkeeper.apache.org/" target="_blank" rel="noreferrer">Apache BookKeeper</a>有“<a href="https://bookkeeper.apache.org/archives/docs/r4.4.0/bookkeeperProtocol.xhtml" target="_blank" rel="noreferrer">最后确认添加</a>”这个概念，它指的是已在多数节点（bookies）上成功复制的条目。</p></li></ul>`,39)]))}const F=i(p,[["render",k]]);export{o as __pageData,F as default};

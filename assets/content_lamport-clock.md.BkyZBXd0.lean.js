import{_ as p,c as h,a4 as l,G as t,w as e,j as i,a,B as k,o as r}from"./chunks/framework.DDPRMxUp.js";const E="/patterns-of-distributed-systems/assets/two-servers-each-with-specific-key-range.QTGwQe-4.png",d="/patterns-of-distributed-systems/assets/lamport-clock-request-sequence.DobBbMjq.png",o="/patterns-of-distributed-systems/assets/different-keys-different-servers.BsaTklWu.png",g="/patterns-of-distributed-systems/assets/two-clients-two-separate-servers.CoolZiHB.png",c="/patterns-of-distributed-systems/assets/single-servergroup-kvstore.Vzi3c93B.png",B=JSON.parse('{"title":"Lamport 时钟（Lamport Clock）","description":"","frontmatter":{},"headers":[],"relativePath":"content/lamport-clock.md","filePath":"content/lamport-clock.md"}'),y={name:"content/lamport-clock.md"};function m(u,s,F,v,C,b){const n=k("center");return r(),h("div",null,[s[5]||(s[5]=l(`<h1 id="lamport-时钟-lamport-clock" tabindex="-1">Lamport 时钟（Lamport Clock） <a class="header-anchor" href="#lamport-时钟-lamport-clock" aria-label="Permalink to &quot;Lamport 时钟（Lamport Clock）&quot;">​</a></h1><p><strong>原文</strong></p><p><a href="https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html" target="_blank" rel="noreferrer">https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html</a></p><p>使用逻辑时间戳作为一个值的版本，以便支持跨服务器的值排序。</p><p><strong>2021.6.23</strong></p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>当值要在多个服务器上进行存储时，需要有一种方式知道一个值要在另外一个值之前存储。在这种情况下，不能使用系统时间戳，因为时钟不是单调的，两个服务器的时钟时间不应该进行比较。</p><p>表示一天中时间的系统时间戳，一般来说是通过晶体振荡器建造的时钟机械测量的。这种机制有一个已知问题，根据晶体震荡的快慢，它可能会偏离一天实际的时间。为了解决这个问题，计算机通常会使用像 NTP 这样的服务，将计算机时钟与互联网上众所周知的时间源进行同步。正因为如此，在一个给定的服务器上连续读取两次系统时间，可能会出现时间倒退的现象。</p><p>由于服务器之间的时钟漂移没有上限，比较两个不同的服务器的时间戳是不可能的。</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>Lamport 时钟维护着一个单独的数字表示时间戳，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LamportClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LamportClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latestTime;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LamportClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          latestTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span></code></pre></div><p>每个集群节点都维护着一个 Lamport 时钟的实例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MVCCStore mvccStore;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LamportClock clock;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Server(MVCCStore mvccStore) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.clock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LamportClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mvccStore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mvccStore;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>服务器每当进行任何写操作时，它都应该使用<code>tick()</code>方法让 Lamport 时钟前进。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LamportClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> int tick(int requestTime) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      latestTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(latestTime, requestTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      latestTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latestTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>如此一来，服务器可以确保写操作的顺序是在这个请求之后，以及客户端发起请求时服务器端已经执行的任何其他动作之后。服务器会返回一个时间戳，用于将值写回给客户端。稍后，请求的客户端会使用这个时间戳向其它的服务器发起进一步的写操作。如此一来，请求的因果链就得到了维持。</p><h3 id="因果性、时间和-happens-before" tabindex="-1">因果性、时间和 Happens-Before <a class="header-anchor" href="#因果性、时间和-happens-before" aria-label="Permalink to &quot;因果性、时间和 Happens-Before&quot;">​</a></h3><p>在一个系统中，当一个事件 A 发生在事件 B 之前，这其中可能存在因果关系。因果关系意味着，在导致 B 发生的原因中，A 可能扮演了一些角色。这种“A 发生在 B 之前（A happens before B）”的关系是通过在每个事件上附加时间戳达成的。如果 A 发生在 B 之前，附加在 A 的时间戳就会小于附加在 B 上的时间戳。但是，因为我们无法依赖于系统时间，我们需要一些方式确保这种“依赖于附加在事件上的时间戳”的 Happens-Before 关系得到维系。<a href="https://en.wikipedia.org/wiki/Leslie_Lamport" target="_blank" rel="noreferrer">Leslie Lamport</a> 在其开创性论文<a href="https://lamport.azurewebsites.net/pubs/time-clocks.pdf" target="_blank" rel="noreferrer">《时间、时钟和事件排序（Time, Clocks and Ordering Of Events）》</a>中提出了一个解决方案，使用逻辑时间戳来跟踪 Happens-Before 的关系。因此，这种使用逻辑时间错追踪因果性的技术就被称为 Lamport 时间戳。</p><p>值得注意的是，在数据库中，事件是关于存储数据的。因此，Lamport 时间戳会附加到存储的值上。这非常符合有版本的存储机制，这一点我们在<a href="./versioned-value.html">有版本的值（Versioned Value）</a>中讨论过。</p><h3 id="一个样例键值存储" tabindex="-1">一个样例键值存储 <a class="header-anchor" href="#一个样例键值存储" aria-label="Permalink to &quot;一个样例键值存储&quot;">​</a></h3><p>考虑一个有多台服务器节点的简单键值存储的例子。它包含两台服务器，蓝色（Blue）和绿色（Green）。每台服务器负责存储一组特定的键值。这是一个典型的场景，数据划分到一组服务器上。值存储为<a href="./versioned-value.html">有版本的值（Versioned Value）</a>，其版本号为 Lamport 时间戳。</p><p><img src="`+E+'" alt="两台服务器，各自负责特定的键值"></p>',23)),t(n,null,{default:e(()=>s[0]||(s[0]=[a("图1：两台服务器，各自负责特定的键值")])),_:1}),s[6]||(s[6]=l(`<p>接收服务器会比较并更新自己的时间戳，然后，用它写入一个有版本的键值和值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> int write(String key, String value, int requestTimestamp) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //update own clock to reflect causality</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writeAtTimestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requestTimestamp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mvccStore.put(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VersionedKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, writeAtTimestamp), value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      return writeAtTimestamp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>用于写入值的时间戳会返回给客户端。通过更新自己的时间戳，客户端会跟踪最大的时间戳。它在发出进一步写入请求时会使用这个时间戳。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  LamportClock clock = new LamportClock(1);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> void write() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server1WrittenAt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLatestTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">server1WrittenAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server2WrittenAt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microservices&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLatestTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">server2WrittenAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      assertTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">server2WrittenAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">server1WrittenAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>请求序列看起来是下面这样：</p><p><img src="`+d+'" alt="两台服务器，各自负责特定的键值"></p>',6)),t(n,null,{default:e(()=>s[1]||(s[1]=[a("图2：两台服务器，各自负责特定的键值")])),_:1}),s[7]||(s[7]=i("p",null,[a("在"),i("a",{href:"./leader-and-followers.html"},"领导者和追随者（Leader and Followers）"),a("组中，甚至可以用同样的技术在客户端和领导者之间的通信，每组负责一组特定的键值。客户端向该组的领导者发送请求，如上所述。Lamport 时钟的实例由该组的领导者维护，其更新方式与上一节讨论的完全相同。")],-1)),s[8]||(s[8]=i("p",null,[i("img",{src:o,alt:"不同的领导者追随者组存储不同的键值"})],-1)),t(n,null,{default:e(()=>s[2]||(s[2]=[a("图3：不同的领导者追随者组存储不同的键值")])),_:1}),s[9]||(s[9]=i("h3",{id:"部分有序",tabindex:"-1"},[a("部分有序 "),i("a",{class:"header-anchor",href:"#部分有序","aria-label":'Permalink to "部分有序"'},"​")],-1)),s[10]||(s[10]=i("p",null,[a("使用 Lamport 时钟存储的值只能是"),i("a",{href:"https://en.wikipedia.org/wiki/Partially_ordered_set",target:"_blank",rel:"noreferrer"},"部分有序的"),a("。如果两个客户端在两台单独的服务器上存储值，时间戳的值是不能用于跨服务器进行值排序的。在下面这个例子里，Bob 在绿色服务器上存储的标题，其时间戳是 2。但是，这并不能决定 Bob 存储的标题是在 Alice 在蓝色服务器存储名字之前还是之后。")],-1)),s[11]||(s[11]=i("p",null,[i("img",{src:g,alt:"部分有序"})],-1)),t(n,null,{default:e(()=>s[3]||(s[3]=[a("图4：部分有序")])),_:1}),s[12]||(s[12]=i("h3",{id:"单一服务器-领导者更新值",tabindex:"-1"},[a("单一服务器/领导者更新值 "),i("a",{class:"header-anchor",href:"#单一服务器-领导者更新值","aria-label":'Permalink to "单一服务器/领导者更新值"'},"​")],-1)),s[13]||(s[13]=i("p",null,[a("对一个领导者追随者服务器组而言，领导者总是负责存储值，其基本实现已经在"),i("a",{href:"./versioned-value.html"},"有版本的值（Versioned Value）"),a("中讨论过，它足以维持所需的因果性。")],-1)),s[14]||(s[14]=i("p",null,[i("img",{src:c,alt:"单一领导者追随者组进行键值存储"})],-1)),t(n,null,{default:e(()=>s[4]||(s[4]=[a("图 5：单一领导者追随者组进行键值存储")])),_:1}),s[15]||(s[15]=l(`<p>在这种情况下，键值存储会保持一个整数的版本计数器。每次从预写日志中应用了写入命令，版本计数器就要递增。然后，用递增过的版本计数器构建一个新的键值。只有领导者负责递增版本计数器，追随者使用相同的版本号。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReplicatedKVStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">…</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  int version = 0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MVCCStore mvccStore = new MVCCStore();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompletableFuture&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; put(String key, String value) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      return server.propose(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetValueCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, value));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  private Response </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applySetValueCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SetValueCommand </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">setValueCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Setting key value &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setValueCommand);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mvccStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VersionedKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(setValueCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), version), setValueCommand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Response response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(version);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>像 <a href="https://www.mongodb.com/" target="_blank" rel="noreferrer">mongodb</a> 和 <a href="https://www.cockroachlabs.com/docs/stable/" target="_blank" rel="noreferrer">cockroachdb</a> 采用了 Lamport 时钟的变体实现了 <a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control" target="_blank" rel="noreferrer">mvcc</a> 存储。</p><p><a href="./generation-clock.html">世代时钟（Generation Clock）</a>是 Lamport 时钟的一个例子。</p>`,5))])}const A=p(y,[["render",m]]);export{B as __pageData,A as default};
